<pre>
  BIP: 39
  Layer: Applications
  Title: Mnemonic code for generating deterministic keys
  Author: Marek Palatinus <slush@satoshilabs.com>
          Pavol Rusnak <stick@satoshilabs.com>
          Aaron Voisine <voisine@gmail.com>
          Sean Bowe <ewillbefull@gmail.com>
  Comments-Summary: Unanimously Discourage for implementation
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0039
  Status: Proposed
  Type: Standards Track
  Created: 2013-09-10
</pre>

==Abstract==

Этот BIP описывает реализацию мнемонического шифра или мнемонического предложения --
группа легко запоминающихся слов -- для генерации детерминированных кошельков.

Он состоит из двух частей: генерации мнемонического шифра и его конвертации в бинарный seed.
Этот seed может быть в последствии использован для генерации детерминированных кошельков,
используя BIP-0032 или похожие методы.

==Мотивация==

Мнемонический код или предложение - это лучший способ для для взаимодействия человеком, по сравнению
с бинарным кодом или шестнадцатиричным представлением seed'а кошелька. Предложение может быть легко
записано на бумаге или озвучено в телефонном разговоре.

Это руководство предназначено для передачи сгенерированной компьютером случайной последовательности
с помощью человекочитаемой транскрипции. Оно не предназначено для обработки предложений, придуманных
пользователем (также известных как brainwallets) в seed кошелька.

==Генерация мнемонического шифра==

Мнемонический шифр должен кодировать энтропию в несколько 32-битных блоков. По мере
увеличения энтропии увеличивается и безопасность, но длина предложения увеличивается.
Мы будем называть изначальную энтропию как ENT. Разрешённый размер ENT - 128-256 бит.

Для начала генерируется энтропия ез ENT бит. Контрольная сумма сгенерирована первых
<pre>ENT / 32</pre> бит своего SHA256 хеша. Контрольная сумма добавляется в конец 
начальной энтропии. Далее, эти сложенные вместе биты разделяются на группы по 11 бит,
каждая из которых кодирует число в диапазоне 0-2047, определяя индекс в списке слов. 
В итоге мы последовательно конвертируем эти числа в соединённые слова и используем эту
строку как наше мнемоническое предложение.

Следующая таблица описывает связь между начальной длиной энтропии (ENT), длиной
контрольной суммы (CS) и длиной сгенерированного мнемонического предложения (MS) в словах.

<pre>
CS = ENT / 32
MS = (ENT + CS) / 11

|  ENT  | CS | ENT+CS |  MS  |
+-------+----+--------+------+
|  128  |  4 |   132  |  12  |
|  160  |  5 |   165  |  15  |
|  192  |  6 |   198  |  18  |
|  224  |  7 |   231  |  21  |
|  256  |  8 |   264  |  24  |
</pre>

==Список слов==

Идеальный список слов должен иметь следующие характеристики:

a) умный подбор слов
   - список слов составлен таким образом, что достаточно набрать первые 4 символа,
     чтобы однозначно идентифицировать слово.

b) отсутствие похожих слов
   - такие пары слов, как "build" и "built", "woman" и "women" или "quick" и "quickly"
     не только мешают запомнить предложение, но и могут вызвать ошибки при произношении и
     их идентификации слушателем.

c) сортированный список слов
   - сортированный список слов позволяет производить более эффективный поиск слова
     (к примеру, позволяет производить бинарный поиск в реализациях вместо линейного)
   - это также позволяет использовать trie (префиксное дерево), что может быть
     использовано, например, для лучшего сжатия.

Список слов может содержать собственные символы, но они должны быть закодированны в 
UTF-8, используя Разложение совместимости форм нормализации (NFKD)

==Из мнемонического кода в seed==

Пользователь может решить защитить свой мнемонический код с помощью парольной фразы.
Если пароль не предоставлен, вместо него будет использована пустая строка "".

Чтобы создать бинарный seed из мнемонической фразы, мы используем функцию PBKDF2 с мнемоническим
предложением (в UTF-8 NFKD), используемым в качестве пароля, и строку "mnemonic" + парольную фразу
(опять же, в UTF-8 NFKD), используемую как соль. Количество итераций установлено на 2048, и HMAC-SHA512
используется в качестве псевдо-случайной функции. Длина полученного ключа будет равна 512 бит (64 байта).

Этот seed в дальнейшем может быть использован для генерации детерменированных кошелькой, используя BIP-0032
или похожие методы.

Преобразование мнемонического предложения в бинарный seed - это польностью независимое от
генерации предложения действие. В результате получается довольно простой код; нет никаких ограничений
на структуру предложения, и клиенты в свою очередь свободны создавать свои собственные списки слов
или даже собственные генераторы предложений, позволяя гибкость в списках слов для проверок на опечатки
и других целей.

Несмотря на то, что возможно также создание мнемонической фразы из алгоритма, отличного от того, что описан
в секции "Generating the mnemonic", делать это не рекомендуется, и програмное обеспечение, которое должно
посчитать  контрольную сумму из мнемонического предложения, используя список слов, может выдать предупреждение
о том, что это неправильно.

Описанный метод также обеспечивает правдоподобное отрицание, потому что каждая парольная фраза
генерирует правильный seed (и таким образом детерминированный кошелек), но только правильная сделает доступным
к использованию желаемый кошелёк.

==Списки слов==

Так как подавляющее большинство кошельков BIP39 поддерживает только английский список слов,
'''настоятельно не рекомендуется''' использовать неанглийские списки слов для генерации
мнемонических предложений.

Если вы всё ещё чувствуете, что вашему приложению необходимы локализованные списки слов,
вместо того, чтобы создавать свой собственный, используйте списки слов, представленные ниже.

* [[bip-0039/bip-0039-wordlists.md|Wordlists]]

==Test vectors==

The test vectors include input entropy, mnemonic and seed. The
passphrase "TREZOR" is used for all vectors.

https://github.com/trezor/python-mnemonic/blob/master/vectors.json

Also see https://github.com/bip32JP/bip32JP.github.io/blob/master/test_JP_BIP39.json

(Japanese wordlist test with heavily normalized symbols as passphrase)

==Reference Implementation==

Reference implementation including wordlists is available from

http://github.com/trezor/python-mnemonic

==Other Implementations==

Go:
* https://github.com/tyler-smith/go-bip39

Python:
* https://github.com/meherett/python-hdwallet

Elixir:
* https://github.com/aerosol/mnemo

Objective-C:
* https://github.com/nybex/NYMnemonic

Haskell:
* https://github.com/haskoin/haskoin

.NET C# (PCL):
* https://github.com/Thashiznets/BIP39.NET

.NET C# (PCL):
* https://github.com/NicolasDorier/NBitcoin

JavaScript:
* https://github.com/bitpay/bitcore/tree/master/packages/bitcore-mnemonic
* https://github.com/bitcoinjs/bip39 (used by [[https://github.com/blockchain/My-Wallet-V3/blob/v3.8.0/src/hd-wallet.js#L121-L146|blockchain.info]])

Java:
* https://github.com/bitcoinj/bitcoinj/blob/master/core/src/main/java/org/bitcoinj/crypto/MnemonicCode.java

Ruby:
* https://github.com/sreekanthgs/bip_mnemonic

Rust:
* https://github.com/maciejhirsz/tiny-bip39/
* https://github.com/koushiro/bip0039-rs

Smalltalk:
* https://github.com/eMaringolo/pharo-bip39mnemonic

Swift:
* https://github.com/CikeQiu/CKMnemonic
* https://github.com/yuzushioh/WalletKit
* https://github.com/pengpengliu/BIP39
* https://github.com/matter-labs/web3swift/blob/develop/Sources/web3swift/KeystoreManager/BIP39.swift
* https://github.com/zcash-hackworks/MnemonicSwift

C++:
* https://github.com/libbitcoin/libbitcoin-system/blob/master/include/bitcoin/system/wallet/mnemonic.hpp

C (with Python/Java/Javascript bindings):
* https://github.com/ElementsProject/libwally-core

Python:
* https://github.com/scgbckbone/btc-hd-wallet
